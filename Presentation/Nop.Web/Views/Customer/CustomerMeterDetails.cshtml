@model CustomerMeterDetailsModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts("My Account-My Meters");
    //page class
    Html.AppendPageCssClassParts("html-account-page");
    Html.AppendPageCssClassParts("html-customer-info-page");
    Html.AppendScriptParts("~/Administration/Scripts/chartjs/Chart.min.js");
    Html.AppendCssFileParts("~/Administration/Content/bootstrap/css/bootstrap.min.css");
    Html.AppendCssFileParts("~/Administration/Content/adminLTE/AdminLTE-2.3.0.min.css");
    Html.AppendScriptParts("~/Administration/Scripts/bootstrap/bootstrap.min.js");
    Html.AppendScriptParts("~/Administration/Scripts/bootstrap/bootstrap.min.js");
    const string prefix = "order-statistics";
    const string hidePanelAttributeName = "HideOrderStatisticsPanel";
    var hidePanel = false;
}
@section left
{
    @Html.Action("CustomerNavigation", "Customer", new { selectedTabId = CustomerNavigationEnum.Info })
}
<div class="page account-page customer-info-page">
    <div class="page-title">
        <h1>Meter Details - @Model.meterId</h1>
    </div>
   

    <div class="page-body">
        <div class="fieldset">
            <div class='form-horizontal well'>
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                        <div class="row">
                            <div class="col-md-12">
                                <fieldset>
                                    <legend>Consumer Details</legend>
                                    <div class="control-group">

                                        <table class="meter-details">
                                            <tr>
                                                <td class="label-td">
                                                    Meter ID <span class="right-float">:</span>
                                                </td>
                                                <td class="value-td">
                                                    @Model.meterId
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="label-td">
                                                    Customer Name<span class="right-float">:</span>
                                                </td>
                                                <td class="value-td">
                                                    @Model.customerName
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="label-td">
                                                    Billing Unit<span class="right-float">:</span>
                                                </td>
                                                <td class="value-td">
                                                    @Model.BillingUnit
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="label-td">
                                                    Location<span class="right-float">:</span>
                                                </td>
                                                <td class="value-td">
                                                    @Model.location
                                                </td>
                                            </tr>
                                        </table>

                                    </div>
                                </fieldset>
                            </div>


                        </div>
                        <br />
                        <div class="row">
                            <div class="col-md-12">
                                <fieldset>
                                    <legend>Consumption Details</legend>
                                    <div class="control-group">
                                        <table class="meter-details">
                                            <tr>
                                                <td class="label-td">
                                                    Current Consumption<span class="right-float">:</span>
                                                </td>
                                                <td class="value-td">
                                                    @Model.ConsumptionUnitReading  kWh
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="label-td">
                                                    Previous Consumption<span class="right-float">:</span>
                                                </td>
                                                <td class="value-td">
                                                    @Model.PreviousConsumptionUnitReading kWh
                                                </td>
                                            </tr>
                                        </table>

                                        <br />
                                    </div>
                                </fieldset>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12" style="background-color:#ccc">
                        <fieldset>
                            <legend>Billing Details</legend>
                            <div class="control-group">
                                <table class="meter-details">
                                    <tr>
                                        <td class="label-td">
                                            Bill Period From<span class="right-float">:</span>
                                        </td>
                                        <td class="value-td">
                                            @Model.BillPeriodFrom
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="label-td">
                                            Bill Period To<span class="right-float">:</span>
                                        </td>
                                        <td class="value-td">
                                            @Model.BillPeriodTo
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="label-td">
                                            Bill Amount<span class="right-float">:</span>
                                        </td>
                                        <td class="value-td">
                                            ₹ @Model.BillAmount
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="label-td">
                                            Bill Payment Date<span class="right-float">:</span>
                                        </td>
                                        <td class="value-td">
                                            @Model.BillPaymentDate
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="label-td">
                                            Bill Due Date<span class="right-float">:</span>
                                        </td>
                                        <td class="value-td">
                                            @Model.BillDueDate
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="label-td">
                                            Last Bill Amount<span class="right-float">:</span>
                                        </td>
                                        <td class="value-td">
                                            ₹ @Model.LastBillAmount
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="label-td">
                                            Last Bill Payment Date<span class="right-float">:</span>
                                        </td>
                                        <td class="value-td">
                                            @Model.LastBillPaymentDate
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </fieldset>
                    </div>
                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="box box-info @if (hidePanel){<text>collapsed-box</text>}" id="@(prefix)-box">
                    <div class="box-header with-border">
                        <h3 class="box-title">
                            <i class="fa fa-shopping-cart"></i>
                            Consumption Statistics
                        </h3>
                        <div class="box-tools pull-right">
                                
                                <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>            } data-chart-role="toggle-chart" data-chart-period="year">@T("Admin.SalesReport.OrderStatistics.Year")</button>
                                <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>            } data-chart-role="toggle-chart" data-chart-period="month">@T("Admin.SalesReport.OrderStatistics.Month")</button>
                                <button class="btn btn-xs btn-info btn-flat" @if (hidePanel) { <text> disabled="disabled" </text>            } data-chart-role="toggle-chart" data-chart-period="week">@T("Admin.SalesReport.OrderStatistics.Week")</button>
                                <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>             } data-chart-role="toggle-chart" data-chart-period="day">Day</button>
                                <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>             } data-chart-role="toggle-chart" data-chart-period="60">Hour</button>
                                <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>              } data-chart-role="toggle-chart" data-chart-period="30">30 min.</button>
                                <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>              } data-chart-role="toggle-chart" data-chart-period="15">15 min.</button>
                                <input id="datetimepicker" title="datetimepicker" style="width: 35%;" />
                            </div>
                    </div>
                    <div class="box-body">
                        
                        <div class="chart" style="height: 300px;">
                            <canvas id="@(prefix)-chart" height="300"></canvas>
                        </div>
                        
                    </div>
                </div>
            </div>
        </div>
        <script>
            $(document).ready(function () {
                var today = new Date()
                $("#datepicker").kendoDatePicker();
                // create Calendar from div HTML element
                $("#datetimepicker").kendoDatePicker({
                    value: today,
                    max: today

                });
                var datepicker = $("#datetimepicker").data("kendoDatePicker");
                datepicker.bind("change", function () {
                    var value = this.value();
                    datepicker.value(value)
                    $('.bg-light-blue').trigger('click');
                    console.log(datepicker.value().toISOString())
                });
                var calendar_value = datepicker.value().toISOString();
                var month = new Array();
                month[0] = "January";
                month[1] = "February";
                month[2] = "March";
                month[3] = "April";
                month[4] = "May";
                month[5] = "June";
                month[6] = "July";
                month[7] = "August";
                month[8] = "September";
                month[9] = "October";
                month[10] = "November";
                month[11] = "December";
                var osCurrentPeriod;
                var datasets = {
                    label: "XYZ",
                    fillColor: "rgba(60,141,188,0.9)",
                    strokeColor: "rgba(60,141,188,0.8)",
                    pointColor: "#3b8bba",
                    pointStrokeColor: "rgba(60,141,188,1)",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(60,141,188,1)",
                    borderColor: 'rgba(60, 141, 188, 0.7)',
                    pointBorderColor: 'rgba(37, 103, 142, 0.9)',
                    pointBackgroundColor: 'rgba(60, 141, 188, 0.4)',
                    pointBorderWidth: 1,
                    data: []
                }
                var data =
                    [{ "date": "29 Thursday", "value": "0" }, { "date": "30 Friday", "value": "0" }, { "date": "1 Saturday", "value": "0" }, { "date": "2 Sunday", "value": "0" }, { "date": "3 Monday", "value": "0" }, { "date": "4 Tuesday", "value": "6" }, { "date": "5 Wednesday", "value": "2" }, { "date": "6 Thursday", "value": "0" }]

                $('#@(prefix)-box').on('click', 'button[data-widget="collapse"]', function () {
                    var collapsed = !$('#@(prefix)-box').hasClass('collapsed-box');
                    if (!collapsed) {
                        $('#@(prefix)-box button[data-chart-role="toggle-chart"]').removeAttr('disabled');
                        if (!osCurrentPeriod) {
                            $('#@(prefix)-box button[data-chart-role="toggle-chart"][data-chart-period="week"]').trigger('click');
                        }
                    } else {
                        $('#@(prefix)-box button[data-chart-role="toggle-chart"]').attr('disabled', 'disabled');
                    }
                });

                var osConfig = {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [

                        ]
                    },
                    options: {
                        legend: {
                            display: true
                        },
                        scales: {
                            xAxes: [{
                                display: true,
                                ticks: {
                                    userCallback: function (dataLabel, index) {
                                        if (window.orderStatistics && window.orderStatistics.config.data.labels.length > 12) {
                                            return index % 5 === 0 ? dataLabel : '';
                                        }
                                        return dataLabel;
                                    }
                                }
                            }],
                            yAxes: [{
                                display: true,
                                ticks: {
                                    userCallback: function (dataLabel, index) {
                                        return (dataLabel ^ 0) === dataLabel ? dataLabel : '';
                                    },
                                    min: 0
                                }
                            }]
                        },
                        showScale: true,
                        scaleShowGridLines: false,
                        scaleGridLineColor: "rgba(0,0,0,.05)",
                        scaleGridLineWidth: 1,
                        scaleShowHorizontalLines: true,
                        scaleShowVerticalLines: true,
                        bezierCurve: true,
                        pointDot: false,
                        pointDotRadius: 4,
                        pointDotStrokeWidth: 1,
                        pointHitDetectionRadius: 20,
                        datasetStroke: true,
                        datasetFill: true,
                        maintainAspectRatio: false,
                        responsive: true
                    }
                };
                function createDataset(osLabels_new, osData_new, label) {

                    if (!window.orderStatistics) {
                        osConfig.data.labels = osLabels_new;
                        //osConfig.data.datasets.push(datasets);
                        var data_len = osConfig.data.datasets.length
                        osConfig.data.datasets[data_len] = {
                            label: "XYZ",
                            fillColor: "rgba(60,141,188,0.9)",
                            strokeColor: "rgba(60,141,188,0.8)",
                            pointColor: "#3b8bba",
                            pointStrokeColor: "rgba(60,141,188,1)",
                            pointHighlightFill: "#fff",
                            pointHighlightStroke: "rgba(60,141,188,1)",
                            borderColor: "#" + ((1 << 24) * Math.random() | 0).toString(16),
                            pointBorderColor: 'rgba(37, 103, 142, 0.9)',
                            pointBackgroundColor: 'rgba(60, 141, 188, 0.4)',
                            pointBorderWidth: 1,
                            data: []
                        }
                        osConfig.data.datasets[data_len].label = label;
                        osConfig.data.datasets[data_len].data = osData_new;

                        osConfig.data.scales =
                        window.orderStatistics = new Chart(document.getElementById("@(prefix)-chart").getContext("2d"), osConfig);
                    } else {

                        window.orderStatistics.config.data.labels = osLabels_new;
                        datasets.borderColor = "#" + ((1 << 24) * Math.random() | 0).toString(16)
                        //window.orderStatistics.config.data.datasets.push(datasets)
                        var data_len = window.orderStatistics.config.data.datasets.length
                        window.orderStatistics.config.data.datasets[data_len] = {
                            label: "XYZ",
                            fillColor: "rgba(60,141,188,0.9)",
                            strokeColor: "rgba(60,141,188,0.8)",
                            pointColor: "#3b8bba",
                            pointStrokeColor: "rgba(60,141,188,1)",
                            pointHighlightFill: "#fff",
                            pointHighlightStroke: "rgba(60,141,188,1)",
                            borderColor: "#" + ((1 << 24) * Math.random() | 0).toString(16),
                            pointBorderColor: 'rgba(37, 103, 142, 0.9)',
                            pointBackgroundColor: 'rgba(60, 141, 188, 0.4)',
                            pointBorderWidth: 1,
                            data: []
                        }
                        window.orderStatistics.config.data.datasets[data_len].data = osData_new;
                        osConfig.data.datasets[data_len].label = label;
                        window.orderStatistics.update();
                    }
                }
                function changeOsPeriod(period) {

                    if (window.orderStatistics) {
                        window.orderStatistics.config.data.datasets = [];
                    }

                    var osLabels = [];
                    var osData = [];
                    var data1 = {};
                    var data;
                    var deviceId = ["@Model.DeviceId"]

                    data1.CustomerID = "@Model.CustomerId";
                    data1.TimeInterval = period;
                    data1.TimeIntervalDate = datepicker.value().toISOString();

                    $.ajax({
                        url: "/api/customer/graph",
                        type: 'POST',
                        headers: {
                            "content-type": "application/json",
                            "cache-control": "no-cache",
                        },
                        dataType: 'json',
                        data: JSON.stringify(data1),
                        success: function (result) {
                            data = result;
                            if (!data.length) {
                                alert("No data for the filter")
                                return false
                            }
                            var res = data.filter(function (v) {
                                
                                return deviceId.indexOf(v.deviceId) > -1;
                            });
                            for (var i = 0; i < res.length; i++) {
                                osLabels = []
                                osData = []
                                cons = res[i].consumptionList;
                                solar = res[i].solarGeneratedUnitsList;
                                for (var j = 0; j < cons.length; j++) {
                                    var date = new Date(cons[j].loggingTime)
                                    switch (period) {
                                        case "year":
                                            osLabels.push(date.getFullYear());
                                            break;
                                        case "month":
                                            osLabels.push(month[date.getMonth()]);
                                            break;
                                        case "week":
                                            osLabels.push("Week:" + j + " " + month[date.getMonth()]);
                                            break;

                                        default:
                                            osLabels.push(date.getHours() + ":" + date.getMinutes());
                                    }

                                    osData.push(cons[j].consumption);

                                }
                                createDataset(osLabels, osData, "Meter");
                                osData = []
                                for (var k = 0; k < solar.length; k++) {
                                    var date = new Date(solar[k].loggingTime)
                                    osData.push(solar[k].solarGeneratedUnits);

                                }
                                createDataset(osLabels, osData, "Solar");

                            }


                        },
                        error: function (xhr, ajaxOptions, thrownError) {

                            alert(xhr.status);
                            alert(thrownError);
                        }
                    });

                    return true
                }

                $('#@(prefix)-box button[data-chart-role="toggle-chart"]').on('click', function () {
                    var period = $(this).attr('data-chart-period');
                    osCurrentPeriod = period;
                    changeOsPeriod(period);
                    $('#@(prefix)-box button[data-chart-role="toggle-chart"]').removeClass('bg-light-blue');
                    $(this).addClass('bg-light-blue');
                });

                @if (!hidePanel)
        {
            <text>
                $('#@(prefix)-box button[data-chart-role="toggle-chart"][data-chart-period="week"]').trigger('click');
                </text>
        }
            });
        </script>

    </div>
    <div class="page-title">
        <h1>Payment History</h1>
        <div class="row">
            <div class="col-md-12">
                <div id="products-grid"></div>
            </div>
        </div>
        <script src="https://www.gstatic.com/firebasejs/4.1.3/firebase.js"></script>
        <script>
    var billingArray = JSON.parse('@Html.Raw(Json.Encode(Model.PreviousBills))');
    var previousBillings = [];
    var monthNames = ["January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
    ];

    for (i = 0; i < billingArray.length; i++) {
        var billingDate = new Date(parseInt(billingArray[i].BillPeriodFrom.toString().substr(6, 13)));
        var singleBill = {
            amount: billingArray[i].BillAmount,
            billId: billingArray[i].Id,
            consumptionUnitReading: billingArray[i].ConsumptionUnitReading,
            isBillPaid: billingArray[i].IsBillPaid,
            billPeriod: monthNames[billingDate.getMonth()] + ' ' + billingDate.getFullYear()
        };
        //console.log('SIngle Bill =', singleBill);
        previousBillings.push(singleBill);
    }
    var arrayOfArrays = [
        {
            "billPeriod": "July-2017",
            "amount": "206",
            "transactionId": "12345",
            "billId": "45645"
        },
        {
            "billPeriod": "August-2017",
            "amount": "25",
            "transactionId": "45645",
            "billId": "456456"
        },
        {
            "billPeriod": "20-july-2017",
            "amount": "2546",
            "transactionId": "4546",
            "billId": "45645"
        }
    ]

    console.log(arrayOfArrays)
    $("#products-grid").kendoGrid({
        dataSource: {
            data: previousBillings,
            schema: {
                model: {
                    fields: {
                        consumptionUnitReading: { type: "string" },
                        billPeriod: { type: "string" },
                        billId: { type: "string" },
                        amount: { type: "string" },
                        isBillPaid: { type: "bool" }
                    }
                }
            },
            error: function (e) {
                display_kendoui_grid_error(e);
                // Cancel the changes
                this.cancelChanges();
            },
            serverPaging: true,
            serverFiltering: true,
            serverSorting: true,
            pageSize: 20
        },
        pageable: {
            input: true,
            numeric: false
        },
        scrollable: false,
        sortable: true,
        filterable: true,
        columns: [
            {
                field: "billId",
                title: "Bill Id",
                //template: '<a href="/Customer/CustomerBillingDetails/#= billId #">#= billId #</a>',
                template: '<a href="/Customer/CustomerBillingDetails/#= billId #">#= billId #</a>',
                //template:'#= MeterId #',
                attributes: { style: "text-align:center" },
                width: 300
            },
            {
                field: "billPeriod",
                title: "Bill Month",
                //template:'#= MeterId #',
                attributes: { style: "text-align:center" },
                width: 300
            },
            {
                field: "amount",
                title: "Amount",
                //template:'#= MeterId #',
                attributes: { style: "text-align:center" },
                width: 300
            },
            {
                field: "consumptionUnitReading",
                title: "Meter Reading",
                //template:'#= MeterId #',
                attributes: { style: "text-align:center" },
                width: 300
            },
            {
                field: "isBillPaid",
                title: "Bill Paid",
                template: '# if(isBillPaid) {# Paid  #} else {# Unpaid#} #',
                attributes: { style: "text-align:center" },
                width: 300
            }
        ]
    });

    var config = {
        apiKey: "AIzaSyDIXCGE7OJgPvn8zO_jqKRkSHpziBbB2z4",
        authDomain: "smarthome.firebaseapp.com",
        databaseURL: "https://smarthome-46be4.firebaseio.com",
        messagingSenderId: "994315037246",
        storageBucket: "smarthome-46be4.appspot.com"
    };
    firebase.initializeApp(config);

    var customerMeterDetails = firebase.database().ref('smartmeterslogs/@Model.DeviceId/');
            customerMeterDetails.on('value', function (snapshot) {
                $('.bg-light-blue').trigger('click');
            });


        </script>

    </div>

</div>
