@model Dashboard
@using System.Globalization;

@{
    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
    var hidePanel = false;
    Html.AppendScriptParts("~/Administration/Scripts/chartjs/Chart.min.js");
    //page title
    ViewBag.Title = T("Customers").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Meter Dashboard");

    const string prefix = "order-statistics";
    //var Meterlist = @Model;
}

@using (Html.BeginForm(new { id = "__AjaxAntiForgeryForm" }))
{
    @Html.AntiForgeryToken()
}
<div class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default panel-search">
                <div class="panel-body">
                    @*Chart 1 *@
                    <div class="row">
                        <div class="col-md-12">
                            <div class="box box-info @if (hidePanel){<text>collapsed-box</text>}" id="@(prefix)-box">
                                <div class="box-header with-border">
                                    <h3 class="box-title">
                                        <i class="fa fa-shopping-cart"></i>
                                        Consumption Statistics
                                    </h3>
                                    <div class="box-tools pull-right">

                                        <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>             } data-chart-role="toggle-chart" data-chart-period="year">@T("Admin.SalesReport.OrderStatistics.Year")</button>
                                        <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>             } data-chart-role="toggle-chart" data-chart-period="month">@T("Admin.SalesReport.OrderStatistics.Month")</button>
                                        <button class="btn btn-xs btn-info btn-flat" @if (hidePanel) { <text> disabled="disabled" </text>             } data-chart-role="toggle-chart" data-chart-period="week">@T("Admin.SalesReport.OrderStatistics.Week")</button>
                                        <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>              } data-chart-role="toggle-chart" data-chart-period="day">Day</button>
                                        <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>              } data-chart-role="toggle-chart" data-chart-period="60">Hour</button>
                                        <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>               } data-chart-role="toggle-chart" data-chart-period="30">30 min.</button>
                                        <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>               } data-chart-role="toggle-chart" data-chart-period="15">15 min.</button>
                                        <input id="datetimepicker" title="datetimepicker" style="width: 35%;" />
                                    </div>
                                </div>
                                <div class="box-body">
                                    
                                    <div class="chart" style="height: 300px;">
                                        <canvas id="@(prefix)-chart" height="300"></canvas>
                                    </div>
                                    
                                </div>
                            </div>
                        </div>
                    </div>
                        
                        
                        <script>
    $(document).ready(function () {
        var today = new Date()
        $("#datepicker").kendoDatePicker();
        // create Calendar from div HTML element
        $("#datetimepicker").kendoDatePicker({
            value: today,
            max: today

        });
        var datepicker = $("#datetimepicker").data("kendoDatePicker");
        datepicker.bind("change", function () {
            var value = this.value();
            datepicker.value(value)
            console.log(datepicker.value().toISOString())
        });
        var calendar_value = datepicker.value().toISOString();
        var month = new Array();
        month[0] = "January";
        month[1] = "February";
        month[2] = "March";
        month[3] = "April";
        month[4] = "May";
        month[5] = "June";
        month[6] = "July";
        month[7] = "August";
        month[8] = "September";
        month[9] = "October";
        month[10] = "November";
        month[11] = "December";
        var osCurrentPeriod;
        var datasets = {
            label: "XYZ",
            fillColor: "rgba(60,141,188,0.9)",
            strokeColor: "rgba(60,141,188,0.8)",
            pointColor: "#3b8bba",
            pointStrokeColor: "rgba(60,141,188,1)",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(60,141,188,1)",
            borderColor: 'rgba(60, 141, 188, 0.7)',
            pointBorderColor: 'rgba(37, 103, 142, 0.9)',
            pointBackgroundColor: 'rgba(60, 141, 188, 0.4)',
            pointBorderWidth: 1,
            data: []
        }
        var data =
            [{ "date": "29 Thursday", "value": "0" }, { "date": "30 Friday", "value": "0" }, { "date": "1 Saturday", "value": "0" }, { "date": "2 Sunday", "value": "0" }, { "date": "3 Monday", "value": "0" }, { "date": "4 Tuesday", "value": "6" }, { "date": "5 Wednesday", "value": "2" }, { "date": "6 Thursday", "value": "0" }]

        $('#@(prefix)-box').on('click', 'button[data-widget="collapse"]', function () {
            var collapsed = !$('#@(prefix)-box').hasClass('collapsed-box');
            if (!collapsed) {
                $('#@(prefix)-box button[data-chart-role="toggle-chart"]').removeAttr('disabled');
                if (!osCurrentPeriod) {
                    $('#@(prefix)-box button[data-chart-role="toggle-chart"][data-chart-period="week"]').trigger('click');
                }
            } else {
                $('#@(prefix)-box button[data-chart-role="toggle-chart"]').attr('disabled', 'disabled');
            }
        });

        var osConfig = {
            type: 'line',
            data: {
                labels: [],
                datasets: [

                ]
            },
            options: {
                legend: {
                    display: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        ticks: {
                            userCallback: function (dataLabel, index) {
                                if (window.orderStatistics && window.orderStatistics.config.data.labels.length > 12) {
                                    return index % 5 === 0 ? dataLabel : '';
                                }
                                return dataLabel;
                            }
                        }
                    }],
                    yAxes: [{
                        display: true,
                        ticks: {
                            userCallback: function (dataLabel, index) {
                                return (dataLabel ^ 0) === dataLabel ? dataLabel : '';
                            },
                            min: 0
                        }
                    }]
                },
                showScale: true,
                scaleShowGridLines: false,
                scaleGridLineColor: "rgba(0,0,0,.05)",
                scaleGridLineWidth: 1,
                scaleShowHorizontalLines: true,
                scaleShowVerticalLines: true,
                bezierCurve: true,
                pointDot: false,
                pointDotRadius: 4,
                pointDotStrokeWidth: 1,
                pointHitDetectionRadius: 20,
                datasetStroke: true,
                datasetFill: true,
                maintainAspectRatio: false,
                responsive: true
            }
        };
        function createDataset(osLabels_new, osData_new, label) {

            if (!window.orderStatistics) {
                osConfig.data.labels = osLabels_new;
                //osConfig.data.datasets.push(datasets);
                var data_len = osConfig.data.datasets.length
                osConfig.data.datasets[data_len] = {
                    label: "XYZ",
                    fillColor: "rgba(60,141,188,0.9)",
                    strokeColor: "rgba(60,141,188,0.8)",
                    pointColor: "#3b8bba",
                    pointStrokeColor: "rgba(60,141,188,1)",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(60,141,188,1)",
                    borderColor: "#" + ((1 << 24) * Math.random() | 0).toString(16),
                    pointBorderColor: 'rgba(37, 103, 142, 0.9)',
                    pointBackgroundColor: 'rgba(60, 141, 188, 0.4)',
                    pointBorderWidth: 1,
                    data: []
                }
                osConfig.data.datasets[data_len].label = label;
                osConfig.data.datasets[data_len].data = osData_new;

                osConfig.data.scales =
                window.orderStatistics = new Chart(document.getElementById("@(prefix)-chart").getContext("2d"), osConfig);
            } else {

                window.orderStatistics.config.data.labels = osLabels_new;
                datasets.borderColor = "#" + ((1 << 24) * Math.random() | 0).toString(16)
                //window.orderStatistics.config.data.datasets.push(datasets)
                var data_len = window.orderStatistics.config.data.datasets.length
                window.orderStatistics.config.data.datasets[data_len] = {
                    label: "XYZ",
                    fillColor: "rgba(60,141,188,0.9)",
                    strokeColor: "rgba(60,141,188,0.8)",
                    pointColor: "#3b8bba",
                    pointStrokeColor: "rgba(60,141,188,1)",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(60,141,188,1)",
                    borderColor: "#" + ((1 << 24) * Math.random() | 0).toString(16),
                    pointBorderColor: 'rgba(37, 103, 142, 0.9)',
                    pointBackgroundColor: 'rgba(60, 141, 188, 0.4)',
                    pointBorderWidth: 1,
                    data: []
                }
                window.orderStatistics.config.data.datasets[data_len].data = osData_new;
                osConfig.data.datasets[data_len].label = label;
                window.orderStatistics.update();
            }
        }
        function changeOsPeriod(period) {

            if (window.orderStatistics) {
                window.orderStatistics.config.data.datasets = [];
            }

            var osLabels = [];
            var osData = [];
            var data1 = {};
            var data;

                                    data1.CustomerID = location.search.substr(1).split("=")[1];
                                    data1.TimeInterval = period;
                                    data1.TimeIntervalDate = datepicker.value().toISOString();

                                    $.ajax({
                                        url: "/api/customer/graph",
                                        type: 'POST',
                                        headers: {
                                            "content-type": "application/json",
                                            "cache-control": "no-cache",
                                        },
                                        dataType: 'json',
                                        data: JSON.stringify(data1),
                                        success: function (result) {
                                            res = result;
                                            if (!res.length) {
                                                alert("No data for the filter")
                                                return false
                                            }
                                            for (var i = 0; i < res.length; i++) {
                                                osLabels = []
                                                osData = []
                                                cons = res[i].consumptionList;
                                                solar = res[i].solarGeneratedUnitsList;
                                                for (var j = 0; j < cons.length; j++) {
                                                    var date = new Date(cons[j].loggingTime)
                                                    switch (period) {
                                                        case "year":
                                                            osLabels.push(date.getFullYear());
                                                            break;
                                                        case "month":
                                                            osLabels.push(month[date.getMonth()]);
                                                            break;
                                                        case "week":
                                                            osLabels.push("Week:" + j + " " + month[date.getMonth()]);
                                                            break;

                                                        default:
                                                            osLabels.push(date.getHours() + ":" + date.getMinutes());
                                                    }

                                                    osData.push(cons[j].consumption);

                                                }
                                                createDataset(osLabels, osData, "Meter");
                                                osData = []
                                                for (var k = 0; k < solar.length; k++) {
                                                    var date = new Date(solar[k].loggingTime)
                                                    osData.push(solar[k].solarGeneratedUnits);

                                                }
                                                createDataset(osLabels, osData, "Solar");

                                            }


                                        },
                                        error: function (xhr, ajaxOptions, thrownError) {

                                            alert(xhr.status);
                                            alert(thrownError);
                                        }
                                    });

                                    return true
                                }

                                $('#@(prefix)-box button[data-chart-role="toggle-chart"]').on('click', function () {
            var period = $(this).attr('data-chart-period');
            osCurrentPeriod = period;
            changeOsPeriod(period);
            $('#@(prefix)-box button[data-chart-role="toggle-chart"]').removeClass('bg-light-blue');
            $(this).addClass('bg-light-blue');
        });

        @if (!hidePanel)
        {
            <text>
        $('#@(prefix)-box button[data-chart-role="toggle-chart"][data-chart-period="week"]').trigger('click');
        </text>
        }
    });
                        </script>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
